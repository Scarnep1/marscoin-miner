// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
class MarsCoinMiner {
    constructor() {
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        this.tg = window.Telegram.WebApp;
        if (this.tg && this.tg.expand) {
            this.tg.expand(); // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        }
        
        // –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        this.balance = 0;
        this.clickPower = 1;
        this.coinsPerSecond = 0;
        this.upgrades = {
            1: { count: 0, baseCost: 15, power: 0.5, name: "–õ–µ–¥—è–Ω–æ–π –±—É—Ä" },
            2: { count: 0, baseCost: 100, power: 2, name: "–ú–∞—Ä—Å–æ—Ö–æ–¥-–º–∞–π–Ω–µ—Ä" },
            3: { count: 0, baseCost: 500, power: 10, name: "–ú–∞–π–Ω–∏–Ω–≥-–±–∞–∑–∞" }
        };

        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.elements = {
            balance: document.getElementById('balance'),
            mineBtn: document.getElementById('mine-btn'),
            coinsPerSecond: document.getElementById('coins-per-second'),
            clickPower: document.getElementById('click-power')
        };

        this.setupEventListeners();
        this.loadGameData();
        this.startGameLoop();
        
        console.log('üöÄ MarsCoin Miner –∑–∞–ø—É—â–µ–Ω!');
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –º–∞–π–Ω–∏–Ω–≥–∞
        this.elements.mineBtn.addEventListener('click', (event) => {
            this.mineCoins();
            this.createClickEffect(event);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π
        document.querySelectorAll('.buy-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const upgradeId = parseInt(e.target.getAttribute('data-upgrade'));
                this.buyUpgrade(upgradeId);
            });
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
    createClickEffect(event) {
        const effect = document.createElement('div');
        effect.textContent = +${this.clickPower};
        effect.style.position = 'fixed';
        effect.style.left = ${event.clientX}px;
        effect.style.top = ${event.clientY}px;
        effect.style.color = '#4cc9f0';
        effect.style.fontWeight = 'bold';
        effect.style.pointerEvents = 'none';
        effect.style.zIndex = '1000';
        effect.style.animation = 'floatUp 1s ease-out forwards';
        
        document.body.appendChild(effect);
        
        // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            effect.remove();
        }, 1000);
    }

    // –î–æ–±—ã—á–∞ –∫–æ–∏–Ω–æ–≤ –∫–ª–∏–∫–æ–º
    mineCoins() {
        this.balance += this.clickPower;
        this.updateUI();
        this.saveGameData();
        console.log('‚õèÔ∏è –î–æ–±—ã—Ç–æ –∫–æ–∏–Ω–æ–≤:', this.clickPower, '–ë–∞–ª–∞–Ω—Å:', this.balance);
    }

    // –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
    buyUpgrade(upgradeId) {
        const upgrade = this.upgrades[upgradeId];
        if (!upgrade) {
            console.error('–£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', upgradeId);
            return;
        }

        const cost = this.getUpgradeCost(upgradeId);
        
        if (this.balance >= cost) {
            this.balance -= cost;
            upgrade.count++;
            this.coinsPerSecond += upgrade.power;
            
            this.updateUI();
            this.saveGameData();
            
            // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
            this.showPurchaseMessage(upgrade.name);
            console.log('üõ†Ô∏è –ö—É–ø–ª–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ:', upgrade.name, '–¶–µ–Ω–∞:', cost);
        } else {
            console.log('üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è');
        }
    }

    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–æ–π)
    getUpgradeCost(upgradeId) {
        const upgrade = this.upgrades[upgradeId];
        return Math.floor(upgrade.baseCost * Math.pow(1.15, upgrade.count));
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        this.elements.balance.textContent = this.formatNumber(this.balance);
        this.elements.coinsPerSecond.textContent = this.coinsPerSecond.toFixed(1);
        this.elements.clickPower.textContent = this.clickPower;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π
        for (let i = 1; i <= 3; i++) {
            const upgrade = this.upgrades[i];
            if (!upgrade) continue;

            const cost = this.getUpgradeCost(i);
            const btn = document.querySelector([data-upgrade="${i}"]);
            const countElement = document.getElementById(upgrade${i}-count);
            
            if (countElement) {
                countElement.textContent = upgrade.count;
            }
            
            if (btn) {
                const costElement = btn.querySelector('.cost');
                if (costElement) {
                    costElement.textContent = cost;
                }
                
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥
                btn.disabled = this.balance < cost;
                
                // –ú–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                if (this.balance < cost) {
                    btn.style.opacity = '0.6';
                } else {
                    btn.style.opacity = '1';
                }
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
        this.updateLeaderboard();
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª (1000 -> 1 000)
    formatNumber(num) {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
    }

    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ
    showPurchaseMessage(upgradeName) {
        const message = document.createElement('div');
        message.textContent = ‚úÖ –ö—É–ø–ª–µ–Ω–æ: ${upgradeName};
        message.style.cssText = 
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(76, 201, 240, 0.9);
            color: white;
            padding: 10px 20px;
            border-radius: 20px;
            z-index: 1000;
            animation: slideDown 0.5s ease-out;
        ;
        
        document.body.appendChild(message);
        
        setTimeout(() => {
            message.remove();
        }, 2000);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
    updateLeaderboard() {
        const leaderboard = document.getElementById('leaderboard');
        if (!leaderboard) return;
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        // –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        const demoData = [
            { name: this.tg?.initDataUnsafe?.user?.first_name || '–í—ã', score: this.balance },
            { name: '–ò–ª–æ–Ω –ú–∞—Å–∫', score: 15000 },
            { name: '–ú–∞—Ä—Å–∏–∞–Ω–∏–Ω', score: 8000 },
            { name: '–ö–æ—Å–º–æ–Ω–∞–≤—Ç', score: 4500 }
        ].sort((a, b) => b.score - a.score);

        leaderboard.innerHTML = demoData.map((user, index) => 
            <div class="leaderboard-item">
                <span class="leaderboard-position">${index + 1}</span>
                <span class="leaderboard-name">${user.name}</span>
                <span class="leaderboard-score">${this.formatNumber(user.score)}</span>
            </div>
        ).join('');
    }

    // –ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥)
    startGameLoop() {
        setInterval(() => {
            if (this.coinsPerSecond > 0) {
                const income = this.coinsPerSecond / 10; // –û–±–Ω–æ–≤–ª—è–µ–º 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                this.balance += income;
                this.updateUI();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –∞–≤—Ç–æ-–º–∞–π–Ω–∏–Ω–≥–µ
                if (Math.random() < 0.02) { // –ü—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    this.saveGameData();
                }
            }
        }, 100);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram Cloud Storage
    saveGameData() {
        if (!this.tg?.CloudStorage?.setItem) {
            console.log('Telegram Cloud Storage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage');
            this.saveToLocalStorage();
            return;
        }

        const gameData = {
            balance: this.balance,
            coinsPerSecond: this.coinsPerSecond,
            upgrades: this.upgrades,
            lastSave: Date.now()
        };
        this.tg.CloudStorage.setItem('marscoin_save', JSON.stringify(gameData), 
            (err, result) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
                    // –ï—Å–ª–∏ Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                    this.saveToLocalStorage();
                } else {
                    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Telegram Cloud Storage');
                }
            }
        );
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram)
    saveToLocalStorage() {
        const gameData = {
            balance: this.balance,
            coinsPerSecond: this.coinsPerSecond,
            upgrades: this.upgrades,
            lastSave: Date.now()
        };
        localStorage.setItem('marscoin_save', JSON.stringify(gameData));
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadGameData() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Telegram Cloud Storage
        if (this.tg?.CloudStorage?.getItem) {
            this.tg.CloudStorage.getItem('marscoin_save', (err, data) => {
                if (!err && data) {
                    this.loadFromData(data);
                } else {
                    // –ï—Å–ª–∏ –≤ Telegram –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º localStorage
                    this.loadFromLocalStorage();
                }
            });
        } else {
            // –ï—Å–ª–∏ –Ω–µ –≤ Telegram, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
            this.loadFromLocalStorage();
        }
    }

    loadFromData(data) {
        try {
            const savedData = JSON.parse(data);
            this.balance = savedData.balance || 0;
            this.coinsPerSecond = savedData.coinsPerSecond || 0;
            this.upgrades = savedData.upgrades || this.upgrades;
            
            console.log('üíæ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ë–∞–ª–∞–Ω—Å:', this.balance);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
            this.balance = 0;
            this.coinsPerSecond = 0;
        }
        
        this.updateUI();
    }

    loadFromLocalStorage() {
        const savedData = localStorage.getItem('marscoin_save');
        if (savedData) {
            this.loadFromData(savedData);
        } else {
            console.log('üéÆ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É');
            this.updateUI();
        }
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
const style = document.createElement('style');
style.textContent = 
    @keyframes floatUp {
        0% { transform: translateY(0); opacity: 1; }
        100% { transform: translateY(-50px); opacity: 0; }
    }
    
    @keyframes slideDown {
        0% { transform: translate(-50%, -100%); opacity: 0; }
        100% { transform: translate(-50%, 0); opacity: 1; }
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–∞–π–Ω–∏–Ω–≥–∞ */
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    .mine-button:active {
        animation: pulse 0.1s ease-in-out;
    }
;
document.head.appendChild(style);

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
document.addEventListener('DOMContentLoaded', () => {
    window.game = new MarsCoinMiner();
});

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugGame = function() {
    if (window.game) {
        console.log('üéÆ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
        console.log('–ë–∞–ª–∞–Ω—Å:', window.game.balance);
        console.log('–ö–æ–∏–Ω/—Å–µ–∫:', window.game.coinsPerSecond);
        console.log('–£–ª—É—á—à–µ–Ω–∏—è:', window.game.upgrades);
    }
};
